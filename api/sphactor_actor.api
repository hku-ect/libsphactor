<class name = "sphactor_actor" state = "stable">

    <constructor>
        Constructor, creates a new Sphactor_actor instance. 
        <argument name = "pipe" type = "zsock"  />
        <argument name = "arg" type = "anything" optional = "1" />
    </constructor>

    <destructor>
        Destructor, destroys a Sphactor_actor. 
    </destructor>

    <method name = "start">
        Return our sphactor's UUID string, after successful initialization
        <return type = "integer" />
    </method>

    <method name = "stop">
        Stop the sphactor_actor
        <return type = "integer" />
    </method>

    <method name = "connect">
        Connect this sphactor_actor to another. Returns 0 on success -1 
        on failure

        Note: sphactor_actor methods can only be called from within its instance!
        <argument name="dest" type="string" />
        <return type = "integer" />
    </method>

    <method name = "disconnect">
        Disconnect this sphactor_actor to another. Returns 0 on success -1 
        on failure

        Note: sphactor_actor methods can only be called from within its instance!
        <argument name="dest" type="string" />
        <return type = "integer" />
    </method>

    <method name = "filters">
        Return the list of filters on the incoming subscribe socket.
        Will return NULL if there are no filters.
        <return type = "zlist" />
    </method>
    
    <method name = "filter add">
        Add a filter to the incoming subscribe socket. You can add multiple filters. 
        Data will pass if at least one filter matches the data. Filters are 
        performed bitwise! See ZeroMQ subscribe documentation for details.
        <argument name = "filter" type = "string" />
    </method>

    <method name = "filter remove">
        Remove a filter from the incoming subscribe socket. Will do nothing if
        the filter does not exists.
        <argument name = "filter" type = "string" />
    </method>

    <method name = "uuid">
        Return our sphactor_actor's UUID string

        Note: sphactor_actor methods can only be called from within its instance!
        <return type = "zuuid" />
    </method>

    <method name = "name">
        Return our sphactor_actor's name. First 6 characters of the UUID by default.

        Note: sphactor_actor methods can only be called from within its instance!
        <return type = "string" />
    </method>

    <method name = "timeout">
        Return the timeout (ms) of the sphactor_actor. 

        Note: sphactor_actor methods can only be called from within its instance!
        <return type = "msecs" />
    </method>

    <method name = "set timeout">
        Set the timeout for the polling of the sphactor_actor. 

        Note: sphactor_actor methods can only be called from within its instance!
        <argument name = "timeout" type = "msecs" />
    </method>

    <method name = "poller add">
        Adds a file descriptor to our poller (wraps zpoller_add).

        Note: sphactor_actor methods can only be called from within its instance!
        <argument name = "sockfd" type = "sockish" />
        <return type = "integer" />
    </method>

    <method name = "poller remove">
        Removes a file descriptor from our poller (wraps zpoller_remove).

        Note: sphactor_actor methods can only be called from within its instance!
        <argument name = "sockfd" type = "sockish" />
        <return type = "integer" />
    </method>

    <method name = "capability">
        Return the capability of the actor as a zconfig instance.
        <return type = "zconfig" mutable = "0" />
    </method>

    <method name = "set capability">
        Set the capability of the actor as a zconfig instance. This should
        only be done on init and can only be done once!
        Returns 0 on success, -1 if capability is already set.
        <argument name = "capability" type = "zconfig" />
        <return type = "integer" />
    </method>

    <method name = "atomic set report">
        Sets the status report. This is a very specific threadsafe lockfree method 
        to enable the controlling thread to get this actor's status.
        <argument name = "report" type = "sphactor report" />  
    </method>

    <method name = "atomic report">
        Gets the status report. This is a very specific threadsafe lockfree method 
        to enable the controlling thread to get this actor's status.
        <return type = "sphactor report" />  
    </method>
    
    <method name = "set custom report data">
        Sets the actor's osc message for future reports. Use this in
        handler functions to store data for use in rendering gui.
        <argument name = "message" type = "zosc" />
    </method>

    <method name = "run once">
        Run a single iteration of the actor. This method is only for advanced use, e.g. running an actor
        alongside something else.
        <return type = "integer" />
    </method>

    <method name = "send">
        Send a message through the actor's output socket. 
        N.B. the supplied message will be destroyed!
        <argument name = "message" type = "zmsg" />
        <return type = "integer" />
    </method>

</class>
