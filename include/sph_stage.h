/*  =========================================================================
    sph_stage - class description

    Copyright (c) 2020 the Contributors as noted in the AUTHORS file.

    This file is part of Sphactor, an open-source framework for high level
    actor model concurrency --- http://sphactor.org

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
    =========================================================================
*/

#ifndef SPH_STAGE_H_INCLUDED
#define SPH_STAGE_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/sph_stage.api" to make changes.
//  @interface
//  This is a stable class, and may not change except for emergencies. It
//  is provided in stable builds.
//  Constructor, creates a new Sphactor stage.
SPHACTOR_EXPORT sph_stage_t *
    sph_stage_new (const char *stage_name);

//  Load a new stage from a stage config filepath.
//  Returns NULL on failure.
SPHACTOR_EXPORT sph_stage_t *
    sph_stage_load (const char *config_path);

//  Destructor, destroys a Sphactor stage and its actors.
SPHACTOR_EXPORT void
    sph_stage_destroy (sph_stage_t **self_p);

//  Save the stage to the active config filepath.
//  Return -1 on failure or 0 on success.
SPHACTOR_EXPORT int
    sph_stage_save (sph_stage_t *self);

//  Save the stage to the a config filepath.
//  Return -1 on failure or 0 on success.
SPHACTOR_EXPORT int
    sph_stage_save_as (sph_stage_t *self, const char *config_path);

//  Clear the stage, destroying all actors in the stage.
SPHACTOR_EXPORT int
    sph_stage_clear (sph_stage_t *self);

//  Return the hash map of actors from the stage.
SPHACTOR_EXPORT const zhash_t *
    sph_stage_actors (sph_stage_t *self);

//  Find an actor by it's identifier (uuid). Returns a sphactor reference or NULL if not found.
//  Please note: if you want to destroy the actor it's best to use the remove_actor method of
//  this class so it's also remove from the stage.
SPHACTOR_EXPORT sphactor_t *
    sph_stage_find_actor (sph_stage_t *self, const char *id);

//  Remove an actor by it's identifier (uuid) and destroy it. Returns 0 if succesful -1 if not found.
SPHACTOR_EXPORT int
    sph_stage_remove_actor (sph_stage_t *self, const char *id);

//  Add an actor to the stage. Returns 0 if succesful -1 if not found.
SPHACTOR_EXPORT int
    sph_stage_add_actor (sph_stage_t *self, sphactor_t *actor);

//  Self test of this class.
SPHACTOR_EXPORT void
    sph_stage_test (bool verbose);

//  @end

#ifdef __cplusplus
}
#endif

#endif
