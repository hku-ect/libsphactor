/*  =========================================================================
    sphactor_report - class description

    Copyright (c) the Contributors as noted in the AUTHORS file.

    This file is part of Sphactor, an open-source framework for high level
    actor model concurrency --- http://sphactor.org

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
    =========================================================================
*/

#ifndef SPHACTOR_REPORT_H_INCLUDED
#define SPHACTOR_REPORT_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/sphactor_report.api" to make changes.
//  @interface
//  This is a stable class, and may not change except for emergencies. It
//  is provided in stable builds.

#define SPHACTOR_REPORT_INIT 0

#define SPHACTOR_REPORT_IDLE 1

#define SPHACTOR_REPORT_STOP 2

#define SPHACTOR_REPORT_DESTROY 3

#define SPHACTOR_REPORT_SOCK 4

#define SPHACTOR_REPORT_TIME 5

#define SPHACTOR_REPORT_FDSOCK 6

#define SPHACTOR_REPORT_API 7

//  Constructor, creates a new Sphactor_report instance.
SPHACTOR_EXPORT sphactor_report_t *
    sphactor_report_new (void);

//  Constructor, creates a new Sphactor_report instance with
//  the given arguments.
SPHACTOR_EXPORT sphactor_report_t *
    sphactor_report_construct (int status, uint64_t iterations, int64_t recv_time, int64_t send_time, zosc_t *custom);

//  Destructor, destroys a Sphactor_report instance.
SPHACTOR_EXPORT void
    sphactor_report_destroy (sphactor_report_t **self_p);

//  Return the status in the report
SPHACTOR_EXPORT int
    sphactor_report_status (sphactor_report_t *self);

//  Return the number of iterations in the report
SPHACTOR_EXPORT uint64_t
    sphactor_report_iterations (sphactor_report_t *self);

//  Return the time of the last send.
//  Returns 0 if it has never sent anything or isn't able to.
SPHACTOR_EXPORT int64_t
    sphactor_report_send_time (sphactor_report_t *self);

//  Return the time of the last receive
//  Returns 0 if it has never sent anything or isn't able to.
SPHACTOR_EXPORT int64_t
    sphactor_report_recv_time (sphactor_report_t *self);

//  Return the custom status as an OSC message
SPHACTOR_EXPORT zosc_t *
    sphactor_report_custom (sphactor_report_t *self);

//  Set the status in the report
SPHACTOR_EXPORT void
    sphactor_report_set_status (sphactor_report_t *self, int status);

//  Set the number of iterations in the report
SPHACTOR_EXPORT void
    sphactor_report_set_iterations (sphactor_report_t *self, uint64_t iterations);

//  Set the time of the last send
SPHACTOR_EXPORT void
    sphactor_report_set_send_time (sphactor_report_t *self, int64_t send_time);

//  Set the time of the last receive
SPHACTOR_EXPORT void
    sphactor_report_set_recv_time (sphactor_report_t *self, int64_t recv_time);

//  set the custom status as an OSC message
SPHACTOR_EXPORT void
    sphactor_report_set_custom (sphactor_report_t *self, zosc_t *message);

//  Self test of this class.
SPHACTOR_EXPORT void
    sphactor_report_test (bool verbose);

//  @end

#ifdef __cplusplus
}
#endif

#endif
